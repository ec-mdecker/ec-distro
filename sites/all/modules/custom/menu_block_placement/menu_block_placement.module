<?php
/**
 * @file
 * Custom module to place content on site using menu system
 */

/**
 * Implements hook_field_info().
 */
function menu_block_placement_field_info() {
  return array(
    'menu_block_placement_reference' => array(
      'label' => t('Menu Block Placement'),
      'description' => t('This field allows the user to use the menu to place blocks on pages and sub pages.'),
      'default_widget' => 'menu_block_placement_widget',
      'default_formatter' => 'menu_block_placement_formatter',
      'settings' => array(
        'default_menus' => array(),
        'default_selects' => array(
          'region' => 'region',
          'individ' => 'individ',
        ),
      ),

    ),
  );
}

/*
 * Implements hook_field_widget_info().
 */
function menu_block_placement_field_widget_info() {
  return array(
    'menu_block_placement_widget' => array(
      'label' => t('Menu Block Placement'),
      'field types' => array('menu_block_placement_reference'),
    )
  );
}

/**
 * Implements hook_field_settings_form().
 */
function menu_block_placement_field_settings_form($field, $instance) {
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);
  $options = menu_get_menus();

  //choose which select boxes are desired
  $form['default_selects'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Default Select Lists'),
    '#options' => array(
      'region' => 'Include Region Select List',
      'individ' => 'Include \'Individual Pages\' checkbox',
    ),
    '#default_value' => $settings['default_selects'],
    '#description' => t('Which select lists to include in the widget.<br>WARNING: These settings can not be altered after data has been entered.'),
  );

  //choose from the available menus, which to include in the dropdown.
  $form['default_menus'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Default Menu Options'),
    '#options' => $options,
    '#default_value' => $settings['default_menus'],
    '#description' => t('Select which menus will be available to the content editor.<br>WARNING: These settings can not be altered after data has been entered.'),
  );

  //if data has been entered, disable the fields
  if (field_has_data($field['field_name'])) {
    $form['default_selects']['#disabled'] = TRUE;
    $form['default_menus']['#disabled'] = TRUE;
  }

  return $form;
}


/*
 * Implements hook_field_widget_form().
 */
function menu_block_placement_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //sets regions and menu variables
  $regions = variable_get('menu_block_placement_regions');
  $options = _menu_block_placement_menu_items($field);

  //menu mlid select list
  $element['mlid'] = array(
    '#type' => 'select',
    '#title' => t('Menu Item'),
    '#options' => $options,
    '#multiple' => $field['cardinality'] == '-1' ? TRUE : FALSE,
    '#required' => $instance['required'],
    '#default_value' => isset($items[0]['mlid']) ? $items[0]['mlid'] : (isset($instance['default_value'][0]['mlid']) ? $instance['default_value'][0]['mlid'] : ''),
  );


  if ($field['settings']['default_selects']['region']) {
    $element['region'] = array(
      '#type' => 'select',
      '#title' => t('Region'),
      '#options' => $regions,
      '#required' => $instance['required'],
      '#empty_option' => t('- None -'),
      '#default_value' => isset($items[0]['region']) ? $items[0]['region'] : (isset($instance['default_value'][0]['region']) ? $instance['default_value'][0]['region'] : ''),
    );
  }
  if ($field['settings']['default_selects']['individ']) {
    $element['individual_pages'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display only on the selected pages'),
      '#default_value' => isset($items[0]['individual_pages']) ? $items[0]['individual_pages'] : (isset($instance['default_value'][0]['individual_pages']) ? $instance['default_value'][0]['individual_pages'] : 0),
    );
  }
  return $element;
}

/**
 * Implement hook_field_presave().
 */
function menu_block_placement_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $data = array();
  if (is_array($items[0]['mlid'])) {
    foreach ($items[0]['mlid'] as $mlid) {
      $data[] = array(
        'mlid' => $mlid,
        'region' => isset($items[0]['region']) ? $items[0]['region'] : NULL,
        'individual_pages' => isset($items[0]['individual_pages']) ? $items[0]['individual_pages'] : NULL,
      );
    }
    $items = $data;
  }
}

/**
 *  Implements hook_field_formatter_info().
 */
function menu_block_placement_field_formatter_info() {
  return array(
    'menu_block_placement_formatter' => array(
      'label' => t('Menu Block Placement'),
      'field types' => array('menu_block_placement_reference'),
    ),
  );
}

/**
 *  Implements hook_field_formatter_view().
 */
function menu_block_placement_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  /*  $menu_array = _menu_block_placement_menu_items($field);
    $regions = variable_get('menu_block_placement_regions');
    $output = array();
    foreach ($items as $item) {
      foreach ($menu_array as $menu) {
        if (isset($menu[$item['mlid']])) {
          $output['mlid'][$item['mlid']] = trim($menu[$item['mlid']], "-\t\n\r\0\x0B");
        }
      }
    }
    $output['region'] = $regions[$items[0]['region']];
    $output['individual_pages'] = $items[0]['individual_pages'] ? 'True' : 'False';*/

  $element = array(
    array(
      '#markup' => 'stuff',
    ),
  );

  return $element;
}

/**
 *  Implements hook_form_alter().
 */
function menu_block_placement_form_alter(&$form, &$form_state, $form_id) {
  $field_names = array();
  //checks and sets the field name to be used to alter the form for that particular field
  if (isset($form_state['node'])) {
    foreach ($form_state['field'] as $field) {
      if ($field[$form['language']['#value']]['field']['type'] == 'menu_block_placement_reference') {
        $field_names[] = $field[$form['language']['#value']]['field']['field_name'];
      }
    }
  }

  foreach ($field_names as $field_name) {
    $form[$field_name][$form['language']['#value']]['#cardinality'] = '1';
    $temp_field = $form[$field_name][$form['language']['#value']][0];
    unset($form[$field_name][$form['language']['#value']]['add_more']);
    unset($temp_field['_weight']);

    $items = db_select('field_data_' . $field_name, 'f')
      ->fields('f', array($field_name . '_mlid'))
      ->condition('entity_id', $form['nid'])
      ->condition('revision_id', $form['vid'])
      ->execute();
    $default_mlid = array();

    $db_field_name = $field_name . '_mlid';
    foreach ($items as $item) {
      $default_mlid[] = $item->$db_field_name;
    }

    $temp_field['mlid']['#default_value'] = $default_mlid;

    foreach ($form[$field_name][$form['language']['#value']] as $key => $value) {
      if (isset($value['mlid'])) {
        unset($form[$field_name][$form['language']['#value']][$key]);
      }
    }
    $form[$field_name][$form['language']['#value']][0] = $temp_field;
  }
}

/**
 * Implements hook_field_widget_error().
 */
function menu_block_placement_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_is_empty().
 */
function menu_block_placement_field_is_empty($item, $field) {
  return !is_array($item) ? TRUE : FALSE;
}


/**
 * Implement hook_views_api().
 */
function menu_block_placement_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'menu_block_placement') . '/includes',
  );
}

/*
 * resets region variables on a cache clear.
 *
 * Implements hook_flush_caches().
 */
function menu_block_placement_flush_caches() {
  _menu_block_placement_regions();
}


//helper function to set the variable for available regions in the select list
function _menu_block_placement_regions() {
  //creates the array for the regions select list
  $available_regions = array();
  $path_to_info = drupal_get_path('theme', variable_get('theme_default', NULL)) . '/' . variable_get('theme_default', NULL) . '.info';
  $theme_settings = drupal_parse_info_file($path_to_info);
  if (isset($theme_settings['settings']['menu_block_placement'])) {
    foreach ($theme_settings['settings']['menu_block_placement'] as $key => $value) {
      if ($value && isset($theme_settings['regions'][$key])) {
        $available_regions[$key] = $theme_settings['regions'][$key];
      }
    }
  }
  //if no block placement regions are labeled in the info file, all regions will be displayed in the dropdown
  else {
    if (isset($theme_settings['regions'])) {
      $available_regions = $theme_settings['regions'];
    }
  }

  //sets the variable for use in the field.
  variable_set('menu_block_placement_regions', $available_regions);
}

function _menu_block_placement_menu_items($field) {
  $options = array();
  if (isset($field["settings"]["default_menus"])) {
    $default_menus = $field["settings"]["default_menus"];
    foreach ($default_menus as $key => $value) {
      if ($value === 0) {
        unset($default_menus[$key]);
      }
    }

    $options = array();
    $menu_items = menu_parent_options($default_menus, array("mlid" => 0));
    foreach ($menu_items as $key => $value) {
      $exploded_key = explode(":", $key);
      $menu_machine_name = ucwords(str_replace("-", " ", array_shift($exploded_key)));
      $menu_id = array_pop($exploded_key);
      if ($menu_id != 0) {
        $options[$menu_machine_name][$menu_id] = str_replace(array(
          "<",
          ">"
        ), "", $value);
      }
    }
  }
  return $options;
}